// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/fluidstackio/fluidstack-go-sdk/internal"
)

type ConfigurationResponse struct {
	// The GPU type of the configuration.
	GpuType GpuType `json:"gpu_type" url:"gpu_type"`
	// The number of GPUs in the configuration.
	GpuCounts []int `json:"gpu_counts" url:"gpu_counts"`
	// The price per GPU hour of the configuration.
	PricePerGpuHr                    string `json:"price_per_gpu_hr" url:"price_per_gpu_hr"`
	EstimatedProvisioningTimeMinutes *int   `json:"estimated_provisioning_time_minutes,omitempty" url:"estimated_provisioning_time_minutes,omitempty"`
	// The regions the configuration is available in.
	Regions []Region `json:"regions" url:"regions"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConfigurationResponse) GetGpuType() GpuType {
	if c == nil {
		return ""
	}
	return c.GpuType
}

func (c *ConfigurationResponse) GetGpuCounts() []int {
	if c == nil {
		return nil
	}
	return c.GpuCounts
}

func (c *ConfigurationResponse) GetPricePerGpuHr() string {
	if c == nil {
		return ""
	}
	return c.PricePerGpuHr
}

func (c *ConfigurationResponse) GetEstimatedProvisioningTimeMinutes() *int {
	if c == nil {
		return nil
	}
	return c.EstimatedProvisioningTimeMinutes
}

func (c *ConfigurationResponse) GetRegions() []Region {
	if c == nil {
		return nil
	}
	return c.Regions
}

func (c *ConfigurationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConfigurationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConfigurationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConfigurationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConfigurationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
